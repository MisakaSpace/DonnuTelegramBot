import datetime
import random

from bot.helpers import get_day_name, get_pair_time, get_pair_status, find_day
from db import Statistic


class Keyboard:
    SCHEDULE = 'üóì –†–æ–∑–∫–ª–∞–¥'
    SCHEDULE_TODAY = "üìï –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
    SCHEDULE_TOMORROW = "üìó –ù–∞ –∑–∞–≤—Ç—Ä–∞"
    SCHEDULE_CURRENT_WEEK = "üìò –ù–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å"
    SCHEDULE_NEXT_WEEK = "üìô –ù–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å"
    SCHEDULE_BY_DAY = "üìì –ü–æ –¥–∞—Ç—ñ"
    SCHEDULE_BY_WEEK = "üìî –ü–æ —Ç–∏–∂–¥–Ω—ñ"
    FEATURE = "üéÆ –§—ñ—á—ñ"
    FEATURE_PAIR_INFO = 'üïó –†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä'
    FEATURE_STATISTIC = 'üßÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    SETTING = "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
    SETTING_CHANGE_GROUP = "üè∑ –ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É"
    BACK = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥"
    HELP = "üîÆ –î–æ–ø–æ–º–æ–≥–∞"


start = lambda: random.choice(('–ü—Ä–∏–≤—ñ—Ç. –î–ª—è –ø–æ—á–∞—Ç–∫—É –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å.',))
start_error = lambda: random.choice(('–ú–∏ –≤–∂–µ –∑–Ω–∞–π–æ–º—ñ.', '–Ø —Ç–µ–±–µ –ø–∞–º\'—è—Ç–∞—é.',))

course_select = lambda: random.choice(("–í–∏–±–µ—Ä–∏ –∫—É—Ä—Å –Ω–∞ —è–∫–æ–º—É —Ç–∏ –Ω–∞–≤—á–∞—î—à—Å—è",))
course_unknown = lambda: random.choice(('–í –º–µ–Ω–µ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–∞–∫–∏–π –∫—É—Ä—Å',))

group_select = lambda: random.choice(("–í–∏–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É", "–í —è–∫—ñ–π –≥—Ä—É–ø—ñ —Ç–∏ –Ω–∞–≤—á–∞—î—à—Å—è?"))
group_unknown = lambda: random.choice(('–í –º–µ–Ω–µ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–∞–∫—É –≥—Ä—É–ø–ø—É',))
group_success = lambda: random.choice(('–î–æ–±—Ä–µ, —è —Ç–µ–±–µ –∑–∞–ø–∞–º\'—è—Ç–∞–≤',))

schedule = lambda: random.choice(("–©–æ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å?", "–©–æ —Ç–æ–±—ñ –ø—ñ–¥–∫–∞–∑–∞—Ç–∏?"))
schedule_by_date = lambda: random.choice(("–í–≤–µ–¥–∏ –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY, —ñ —è –ø–æ–∫–∞–∂—É —Ç–æ–±—ñ —Ä–æ–∑–∫–ª–∞–¥",))
schedule_by_week = lambda: random.choice(("–í–≤–µ–¥–∏ –±—É–¥—å-—è–∫–∏–π –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY, —ñ —è –ø–æ–∫–∞–∂—É —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ü–µ–π "
                                          "—Ç–∏–∂–¥–µ–Ω—å",))

unknown_cmd = lambda: random.choice(("–©–æ —Ç–∏ –≤—ñ–¥ –º–µ–Ω–µ —Ö–æ—á–µ—à? –Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é.",
                                     "–©–æ —Ç–∏ —Ç–∞–∫–µ –Ω–∞–ø–∏—Å–∞–≤? –Ø –Ω–µ –º–æ–∂—É —Ü–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏.",
                                     "–¢–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ –Ω–µ–º–∞—î –≤ –º–æ—ó–π –±–∞–∑—ñ. –í–∏–±–µ—Ä–∏ —â–æ—Å—å —ñ–∑ –º–µ–Ω—é –Ω–∏–∂—â–µ."))

back = lambda: random.choice(('–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?',))

setting = lambda: random.choice(('–©–æ –±–∞–∂–∞—î—à –∑–º—ñ–Ω–∏—Ç–∏?',))

user_help = lambda: "–û–≥–æ, –≤—Å–µ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –ø–æ–≥–∞–Ω–æ —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞? " \
                    "–ë–æ—Ç –º–æ–∂–µ –ª–∞–≥–∞—Ç–∏/–∑–∞–≤–∏—Å–∞—Ç–∏/–ø–æ–º–∏–ª—è—Ç–∏—Å—å, –∞–ª–µ –≤—Å–µ –∂ —ñ–Ω–∫–æ–ª–∏ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ. " \
                    "–ó–Ω–∞–π—à–æ–≤ –±–∞–≥? –ü–∏—à–∏ (c) @MisakaSpace\n" \
                    "–ü–æ—Ç—Ä—ñ–±–µ–Ω —Å–æ—É—Å? –¢—Ä–∏–º–∞–π: https://git.io/Jecg9"

schedule_for = lambda: random.choice(("–û—Å—å —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞: ", "–¢—Ä–∏–º–∞–π —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞: "))

free_day = lambda: random.choice(("–í —Ü–µ–π –¥–µ–Ω—å –ø–∞—Ä –Ω–µ –±—É–¥–µ",))

format_parse_error = lambda: random.choice(("–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ —Ç—É—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑",))

features = lambda: random.choice(("–û—Å—å —â–æ —è —â–µ –≤–º—ñ—é",))

user_has_no_group = lambda: random.choice(("–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–∫–∞–∂–∏ —Å–≤–æ—é –≥—Ä—É–ø—É –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö",))

admin_update_schedule_user_message = lambda: random.choice(("–ë–æ—Ç –æ–Ω–æ–≤–ª—é—î –¥–∞–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É",))
admin_update_schedule_success = lambda: random.choice(("–†–æ–∑–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!",))
admin_update_schedule_error_parse = lambda error: random.choice(("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ: " + str(error),))
admin_update_schedule_error_bad_file = lambda: random.choice(("–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ —Ü–µ –∑–∞ —Ñ–∞–π–ª. –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—é!",))
admin_update_schedule_error_not_admin = lambda: random.choice(("–ï–π, –≤ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤!",))


ai_other = lambda: random.choice(("–Ø —Ç–µ–±–µ –Ω–µ —Ä–æ–∑—É–º—ñ—é. –ó–∞–ø–∏—Ç–∞–π –∫—Ä–∞—â–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –∞ —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—à –ø–∞—Ä–∏.",))
ai_greeting = lambda: random.choice(("–í—ñ—Ç–∞—é, —è –º–∞–π–∂–µ —Ä–æ–∑—É–º–Ω–∏–π –±–æ—Ç, –º–æ–∂–µ—à –∑–∞–ø–∏—Ç–∞—Ç–∏ –≤ –º–µ–Ω–µ —Ä–æ–∑–∫–ª–∞–¥",))
ai_parting = lambda: random.choice(("–ë—É–≤–∞–π, –ø–∏—à–∏ —è–∫—â–æ —â–æ—Å—å –ø–æ—Ç—Ä—ñ–±–Ω–æ",))
ai_kidding = lambda: random.choice(("–•–∞ —Ö–∞ —Ö–∞, –Ω–µ —Å–º—ñ—à–Ω–æ. –Ø –ø–æ–∫–∞–∑—É—é —Ç—ñ–ª—å–∫–∏ —Ä–æ–∑–∫–ª–∞–¥ –ø–∞—Ä.",))


def render_pair_info():
    return "\n".join(["{} {} –ø–∞—Ä–∞: {}".format(
        get_pair_status(number),
        number,
        get_pair_time(number)
    ) for number in range(1, 9)], )


def render_user_info(user, group):
    if group:
        return "–ù–∞—Å–∫—ñ–ª—å–∫–∏ —è –ø–∞–º'—è—Ç–∞—é —Ç–≤–æ—è –≥—Ä—É–ø–∞: " + group.name + '\n'
    else:
        return "–¢–∏ —â–µ –Ω–µ –≤–∫–∞–∑–∞–≤ —Å–≤–æ—é –≥—Ä—É–ø—É\n"


def render_schedule_for_date(schedule_info, date, header=True):
    reply = "{}{} {:02}.{:02}.{:02}:\n".format(schedule_for() if header else "", get_day_name(date), date.day,
                                               date.month, date.year)
    if not schedule_info:
        reply += free_day() + '\n'
    for pair in schedule_info:
        reply += "‚ñ´ #{} [{}] - {}\n".format(pair.pair_number, get_pair_time(pair.pair_number), pair.information)
    return reply


def render_schedule_for_week(schedule_info):
    start_day = list(schedule_info.keys())[0]
    end_day = list(schedule_info.keys())[len(schedule_info) - 1]
    reply = "{} {:02}.{:02}.{:02}-{:02}.{:02}.{:02}:\n".format(schedule_for(),
                                                               start_day.day, start_day.month, start_day.year,
                                                               end_day.day, end_day.month, end_day.year)
    for day, schedule_data in schedule_info.items():
        reply += "==========\n" + render_schedule_for_date(schedule_data, day, header=False)
    return reply


async def render_statistics():
    now = datetime.datetime.now()

    count_by_hours = await Statistic.count_by_date_interval(now - datetime.timedelta(hours=1), now)
    count_by_day = await Statistic.count_by_date_interval(now - datetime.timedelta(days=1), now)
    count_by_month = await Statistic.count_by_date_interval(now - datetime.timedelta(days=30), now)

    count = "üîÑ –û–±—Ä–æ–±–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: \n \t–ó–∞ –≥–æ–¥–∏–Ω—É: {} \n \t–ó–∞ –¥–µ–Ω—å: {} \n \t–ó–∞ –º—ñ—Å—è—Ü—å: {}".format(
        count_by_hours,
        count_by_day,
        count_by_month
    )

    user_by_hours = await Statistic.active_users_by_date_interval(now - datetime.timedelta(hours=1), now)
    user_by_day = await Statistic.active_users_by_date_interval(now - datetime.timedelta(days=1), now)
    user_by_month = await Statistic.active_users_by_date_interval(now - datetime.timedelta(days=30), now)

    user = "üöª –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: \n \t–ó–∞ –≥–æ–¥–∏–Ω—É: {} \n \t–ó–∞ –¥–µ–Ω—å: {} \n \t–ó–∞ –º—ñ—Å—è—Ü—å: {}".format(
        user_by_hours,
        user_by_day,
        user_by_month
    )

    top_message = (await Statistic.message_rating())[:3]

    top = "üÜô –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∑–∞–ø–∏—Ç: \n \t{}".format(
        "\n \t".join(['{} - {}'.format(count, message) for message, count in top_message])
    )
    status = "–Ø –ø—Ä–∞—Ü—é—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
    return "{}\n{}\n{}\n{}".format(status, count, user, top)
